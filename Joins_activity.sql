CREATE DATABASE EMPLOYEE_SCHEMA;

USE EMPLOYEE_SCHEMA;

CREATE TABLE EMPLOYEES(
EMPLOYEE_ID INT,
EMPLOYEE_NAME  VARCHAR(100) NOT NULL,
DEPARTMENT_ID INT NOT NULL
);

DESC EMPLOYEES;

CREATE TABLE DEPARTMENTS(
DEPARTMENT_ID INT PRIMARY KEY,
DEPARTMENT_NAME VARCHAR(100)
);

DESC DEPARTMENTS;

ALTER TABLE DEPARTMENTS
MODIFY COLUMN DEPARTMENT_NAME VARCHAR(100) ;

ALTER TABLE DEPARTMENTS
MODIFY COLUMN DEPARTMENT_ID INT PRIMARY KEY ;

CREATE TABLE PROJECTS (
PROJECT_ID INT PRIMARY KEY NOT NULL,
PROJECT_NAME VARCHAR(100) NOT NULL,
DEPARTMENT_ID INT
);

DESC PROJECTS;

INSERT INTO EMPLOYEES(EMPLOYEE_ID, EMPLOYEE_NAME, DEPARTMENT_ID) VALUES
(1,'JOHN',1),(2,'JANE',2),(3,'MARK',1),(4,'EMILY',3),(5,'KAREN',5);

SELECT * FROM EMPLOYEES;

INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME) VALUES
(1,'SALES'),(2,'HR'),(3,'IT'),(4,'MARKETING'),(5,NULL);

SELECT * FROM DEPARTMENTS;

INSERT INTO PROJECTS (PROJECT_ID, PROJECT_NAME, DEPARTMENT_ID) VALUES
(101, 'Project A', 1),
(102, 'Project B', 2),
(103, 'Project C', 3),
(104, 'Project D', 4),
(105, 'Project E', NULL);

SELECT * FROM PROJECTS;

-- Retrieve the list of employees along with their department names where employees are associated with departments.
SELECT e.EMPLOYEE_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

-- Retrieve all employees and their associated department names. If an employee does not belong to a department, show NULL.
SELECT e.EMPLOYEE_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
LEFT JOIN DEPARTMENTS d ON e.DEPARTMENT_ID=d.DEPARTMENT_ID;

-- Retrieve all departments and the names of employees in those departments. If a department does not have any employees, show NULL.
SELECT d.DEPARTMENT_NAME, e.EMPLOYEE_NAME
FROM DEPARTMENTS d
LEFT JOIN EMPLOYEES e ON d.DEPARTMENT_ID=e.DEPARTMENT_ID;

-- Retrieve all possible combinations of employees and projects.
SELECT e.EMPLOYEE_NAME, p.PROJECT_NAME
FROM EMPLOYEES e
CROSS JOIN PROJECTS p;

-- Retrieve the list of employees whose department ID is greater than the department ID of 'HR' department.
SELECT e.EMPLOYEE_NAME
FROM EMPLOYEES e
WHERE e.DEPARTMENT_ID > (
    SELECT DEPARTMENT_ID
    FROM DEPARTMENTS
    WHERE DEPARTMENT_NAME= 'HR'
);

-- Retrieve the list of projects along with their department names, where the projects are associated with departments
SELECT p.PROJECT_NAME, d.DEPARTMENT_NAME
FROM PROJECTS p
JOIN DEPARTMENTS d ON p.DEPARTMENT_ID=d.DEPARTMENT_ID;

-- Find employees who are not assigned to any department
SELECT e.EMPLOYEE_NAME
FROM EMPLOYEES e
WHERE e.DEPARTMENT_ID IS NULL;

-- Find departments that have no employees
SELECT d.DEPARTMENT_NAME
FROM DEPARTMENTS d
LEFT JOIN EMPLOYEES e ON d.DEPARTMENT_ID=e.DEPARTMENT_ID
WHERE e.EMPLOYEE_ID IS NULL;

-- Find all departments along with the number of employees in each department
SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES
FROM DEPARTMENTS d
LEFT JOIN EMPLOYEES e ON d.DEPARTMENT_ID=e.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_NAME;

